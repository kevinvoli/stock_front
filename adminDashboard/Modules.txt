tap //in commande shell
npx auth secret 

structure de donne universel:
 { 
        moduleName:"nom_du_module_ou_entite",
        data:[],
        serviceName:"nom_du_service_contacte",
        method:"le_method",
        serviceSource:""
 };
route tcp: 
		"findAll_log",
		"findOne_log",
		"update_log",
		"remove_log"
	
Module Commandes
Tables :

    fournisseurs 
    clients 
    commandes 
    details_commandes :

Relations :

    commandes est lié à fournisseurs ou clients via client_id ou fournisseur_id.
    details_commandes est lié à commandes via commande_id et à produits via produit_id.


2. Module Log

Tables :

    logs : Enregistre les actions effectuées par les utilisateurs.
    corbeille : Stocke temporairement les données supprimées pour récupération.
	strusture de donné:
		logs: {
	
		
}

Relations :

    logs est lié à utilisateurs (module Authentification) via user_id.


3. Module Stock
Tables :

    produits : Liste des produits gérés :
    categories : Catégorisation des produits :
    emplacements : Stocke les lieux de stockage (entrepôts, magasins) :
    mouvements_stock : Suivi des entrées/sorties de stock :

Relations :

    produits est lié à categories via categorie_id.
    mouvements_stock est lié à produits via produit_id et à emplacements si les mouvements concernent un emplacement spécifique.


4. Module Notification

Tables :

    notifications : Enregistre les notifications envoyées :

Relations :

    notifications est lié à utilisateurs (module Authentification) via user_id et à produits via produit_id.


5. Module Authentification
Tables :

    utilisateurs : Liste des utilisateurs de la plateforme :
    roles : Décrit les autorisations spécifiques par rôle :
    permissions : Liste les autorisations accordées à un rôle :

Relations :

    utilisateurs est lié à roles via role_id.
    roles est lié à permissions pour définir les autorisations.


6. Module Gateway
Tables :

    services : Liste les microservices actifs :
    journal_services : Historique des appels API entre microservices :

Relations :

    journal_services est lié à services via service_source et service_cible.

Relations entre les Modules :

    Commandes et Stock :
        Les produits des commandes proviennent de la table produits du module Stock.
    Log et Authentification :
        Les actions enregistrées dans les logs concernent des utilisateurs de la table utilisateurs.
    Notification et Stock :
        Les notifications de rupture ou livraison sont liées aux produits dans la table produits.
    Auth et Gateway :
        Les appels API nécessitent une authentification pour s'assurer que seuls les utilisateurs ou services autorisés peuvent accéder à certaines actions.




les différents route: 

cretion de compte user: /Gateway/create_user method: POST
confirmation de mail : /Gateway/confirmation Method: GET
connection user : /Gateway/login  Method: POST


les api a texte :
pour le stockage d'image en ligne:
1. Freeimage.host
https://freeimage.host/fr?utm_source=chatgpt.com

2. ImgBB
https://fr.imgbb.com/?utm_source=chatgpt.com

3. Postimages
https://postimages.org/fr/?utm_source=chatgpt.com

4. MagicAPI Image Upload
https://api.market/store/magicapi/image-upload?utm_source=chatgpt.com


pour avoir une base de donnée gratuite (c13HszwFcL)
1. InfinityFree
https://www.infinityfree.com/  description: déjà creer une bd sur cette plateforme

2. FreeSQLDatabase
https://www.freesqldatabase.com/

3. AlwaysData
https://www.alwaysdata.com/fr/ 

4. Railway.app
https://railway.com/

Réalisation effectuées sur la partie Users

Ajout de la page Liste des utilisateurs, accesible via
http://localhost:3000/users
rest à faire 
-integration de la barre de recherche

Ajout de la page ajout des utilisateurs, accesible via
http://localhost:3000/users/add
rest à faire
-integration de l'api post

